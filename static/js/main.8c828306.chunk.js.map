{"version":3,"sources":["Assets/WeatherImgs/Above73.jpg","Assets/WeatherImgs/Below0.jpg","StylingFolder/style.js","Components/Clock.js","Components/Weather.js","Components/GoogleSearch.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","WeatherImg","styled","div","Wrapper","WeatherInfo","WeatherWrapper","GoogleInput","input","GoogleButton","button","Clock","props","timer","currentDate","React","useState","date","setDate","useEffect","timerID","setInterval","Date","clearInterval","useNewTimer","toLocaleTimeString","Weather","num","latitude","setLatitude","longitude","setLongitude","setData","temperature","setTemperature","humidity","setHumidity","description","setDescription","convertKelvintoFahrenheit","Celsius","Math","round","navigator","geolocation","getCurrentPosition","pos","crd","coords","console","log","accuracy","err","warn","code","message","enableHighAccuracy","timeout","maximumAge","url","a","axios","response","data","main","temp","weather","fetchData","style","backgroundImage","Below0","Above73","convertKelvinToCelsius","GoogleSearch","action","method","type","name","placeholder","value","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8c828306.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Above73.7259e3f6.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Below0.bf1df843.jpg\";","import styled from \"styled-components\";\r\n\r\nexport const WeatherImg = styled.div`\r\n  height: auto;\r\n  background-size: cover;\r\n  padding: 10px;\r\n  border-radius: 25px;\r\n  width:100%;\r\n`;\r\nexport const Wrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  margin: auto;\r\n`;\r\nexport const WeatherInfo = styled.div`\r\n  display: flex;\r\n  width:50%;\r\n  border-radius: 25px;\r\n  flex-direction: column;\r\n  background-color: rgba(0, 22 , 46, 0.5);\r\n  margin: auto;\r\n\r\n`;\r\nexport const WeatherWrapper = styled.div`\r\n  display: flex;\r\n  width:100%;\r\n  flex-direction: row-reverse;\r\n  justify-content: center;\r\n  margin: auto;\r\n  margin:3% auto;\r\n  max-width:1000px;\r\n`;\r\nexport const AppWrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  max-width: 1000px;\r\n  width:100%;\r\n  margin: auto;\r\n`;\r\nexport const GoogleInput = styled.input`\r\nborder-radius: 25px;\r\nheight: 30px;\r\nwidth: 30%;\r\n`;\r\nexport const GoogleButton = styled.button`\r\nborder-radius: 25px;\r\nheight: 30px;\r\nwidth: 10%;\r\nmargin: 0 1%;\r\n`;","import React from \"react\";\r\nimport { Wrapper } from \"../StylingFolder/style\";\r\n\r\nfunction Clock(props) {\r\n  const timer = useNewTimer(new Date());\r\n\r\n  return (\r\n    <Wrapper>\r\n      <div>\r\n        <h2>Welcome, It is {timer.toLocaleTimeString()}.</h2>\r\n      </div>\r\n    </Wrapper>\r\n  );\r\n}\r\n\r\nfunction useNewTimer(currentDate) {\r\n  const [date, setDate] = React.useState(currentDate);\r\n\r\n  React.useEffect(() => {\r\n    var timerID = setInterval(() => tick(), 1000);\r\n    return function cleanup() {\r\n      clearInterval(timerID);\r\n    };\r\n  });\r\n\r\n  function tick() {\r\n    setDate(new Date());\r\n  }\r\n\r\n  return date;\r\n}\r\n\r\nexport default Clock;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  WeatherWrapper,\r\n  WeatherImg,\r\n  WeatherInfo\r\n} from \"../StylingFolder/style\";\r\nimport axios from \"axios\";\r\nimport Below0 from \"../Assets/WeatherImgs/Below0.jpg\";\r\nimport Above73 from \"../Assets/WeatherImgs/Above73.jpg\";\r\n\r\nfunction Weather(props) {\r\n  //Sets state\r\n  const [latitude, setLatitude] = useState(\"\");\r\n  const [longitude, setLongitude] = useState(\"\");\r\n  const [data, setData] = useState(\"\");\r\n  const [temperature, setTemperature] = useState(\"\");\r\n  const [humidity, setHumidity] = useState(\"\");\r\n  const [description, setDescription] = useState(\"\");\r\n\r\n  //Fetches location.\r\n  useEffect(() => {\r\n    var options = {\r\n      enableHighAccuracy: true,\r\n      timeout: 2000,\r\n      maximumAge: 0\r\n    };\r\n\r\n    function success(pos) {\r\n      var crd = pos.coords;\r\n\r\n      console.log(\"Your current position is:\");\r\n      console.log(`Latitude : ${crd.latitude}`);\r\n      console.log(`Longitude: ${crd.longitude}`);\r\n      console.log(`More or less ${crd.accuracy} meters.`);\r\n\r\n      setLatitude(crd.latitude);\r\n      setLongitude(crd.longitude);\r\n    }\r\n\r\n    function error(err) {\r\n      console.warn(`ERROR(${err.code}): ${err.message}`);\r\n    }\r\n\r\n    navigator.geolocation.getCurrentPosition(success, error, options);\r\n  }, [latitude, longitude]);\r\n\r\n  //Fetches weather data based on coordinates and sets the state\r\n  useEffect(() => {\r\n    const url = `https://api.openweathermap.org/data/2.5/weather?lat=${latitude}&lon=${longitude}&APPID=5dac0afa27fec8d40372cc6e258f2a8b`;\r\n    async function fetchData() {\r\n      const response = await axios(url);\r\n      const data = response.data;\r\n      const temperature = data.main.temp;\r\n      const humidity = data.main.humidity;\r\n      const description = data.weather[0].description;\r\n      setData(data);\r\n      setTemperature(temperature);\r\n      setHumidity(humidity);\r\n      setDescription(description);\r\n    }\r\n    fetchData();\r\n  }, [latitude, longitude]);\r\n\r\n  //Converts Kelvin to Celsius.\r\n  function convertKelvinToCelsius(num) {\r\n    const Celsius = num - 273.25;\r\n    return Math.round(Celsius);\r\n  }\r\n  function convertKelvintoFahrenheit(num) {\r\n    const Celsius = num - 273.25;\r\n    return Math.round(Celsius * 1.8 + 32);\r\n  }\r\n  //Changes background based on temperature and weather.\r\n  function changeImg(num) {\r\n    if (num > -30 && num <= 0) {\r\n      return `url(${Below0})`;\r\n    } else if (num > 1 && num <= 30) {\r\n      return `url(${Below0})`;\r\n    } else if (num > 31 && num <= 59) {\r\n      return `url(${Below0})`;\r\n    } else if (num > 60 && num <= 72) {\r\n      return `url(${Below0})`;\r\n    } else if (num > 73 && num <= 100) {\r\n      return `url(${Above73})`;\r\n    }\r\n  }\r\n\r\n  return (\r\n    <WeatherWrapper>\r\n      <WeatherImg\r\n        style={{\r\n          backgroundImage: `${changeImg(\r\n            convertKelvintoFahrenheit(temperature)\r\n          )}`\r\n        }}\r\n      >\r\n        <WeatherInfo>\r\n          <h2>WEATHER!!!!</h2>\r\n          <p>Latitude: {latitude}</p>\r\n          <p>Longitude: {longitude}</p>\r\n          <h3>Today:</h3>\r\n          <p>{description}</p>\r\n          <h3>Temperature:</h3>\r\n          <p>Celsius: {convertKelvinToCelsius(temperature)}°</p>\r\n          <p>Fahrenheit: {convertKelvintoFahrenheit(temperature)}°</p>\r\n          <h3>Humidity:</h3>\r\n          <p>{humidity}%</p>\r\n        </WeatherInfo>\r\n      </WeatherImg>\r\n    </WeatherWrapper>\r\n  );\r\n}\r\n\r\nexport default Weather;\r\n","import React from \"react\";\r\nimport { Wrapper, GoogleButton, GoogleInput } from \"../StylingFolder/style\";\r\n\r\nfunction GoogleSearch(props) {\r\n  return (\r\n    <Wrapper>\r\n      <div>\r\n        <form action=\"https://www.google.com/search\" method=\"GET\">\r\n          <GoogleInput type=\"text\" name=\"q\" placeholder=\"Google\" />\r\n          <GoogleButton value=\"Search\">Search</GoogleButton>\r\n        </form>\r\n      </div>\r\n    </Wrapper>\r\n  );\r\n}\r\n\r\nexport default GoogleSearch;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Clock from \"./Components/Clock\";\nimport Weather from \"./Components/Weather\";\nimport GoogleSearch from \"./Components/GoogleSearch\";\nimport { Wrapper } from \"./StylingFolder/style\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Wrapper>\n        <div>\n          <Clock />\n          <GoogleSearch />\n          <Weather/>\n        </div>\n      </Wrapper>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}