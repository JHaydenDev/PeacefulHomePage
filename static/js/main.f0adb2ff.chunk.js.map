{"version":3,"sources":["StylingFolder/style.js","Components/Clock.js","Components/Weather.js","Components/GoogleSearch.js","App.js","serviceWorker.js","index.js"],"names":["Wrapper","styled","div","Clock","props","timer","currentDate","React","useState","date","setDate","useEffect","timerID","setInterval","Date","clearInterval","useNewTimer","toLocaleTimeString","Weather","latitude","setLatitude","longitude","setLongitude","setData","temperature","setTemperature","humidity","setHumidity","description","setDescription","navigator","geolocation","getCurrentPosition","pos","crd","coords","console","log","accuracy","err","warn","code","message","enableHighAccuracy","timeout","maximumAge","url","a","axios","response","data","main","temp","weather","fetchData","num","Celsius","Math","round","convertKelvinToCelsius","convertKelvintoFahrenheit","GoogleSearch","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"odAEQ,IAAMA,E,MAASC,EAAOC,IAAT,KC+BNC,MA9Bf,SAAeC,GACb,IAAMC,EAYR,SAAqBC,GAAc,IAAD,EACRC,IAAMC,SAASF,GADP,mBACzBG,EADyB,KACnBC,EADmB,KAchC,OAXAH,IAAMI,UAAU,WACd,IAAIC,EAAUC,YAAY,WAO1BH,EAAQ,IAAII,OAP4B,KACxC,OAAO,WACLC,cAAcH,MAQXH,EA1BOO,CAAY,IAAIF,MAE9B,OACE,kBAACd,EAAD,KACE,6BACE,6CACA,qCAAWK,EAAMY,qBAAjB,Q,yCC2EOC,MAjFf,SAAiBd,GAAO,MAEUI,mBAAS,IAFnB,mBAEfW,EAFe,KAELC,EAFK,OAGYZ,mBAAS,IAHrB,mBAGfa,EAHe,KAGJC,EAHI,OAIEd,mBAAS,IAJX,mBAITe,GAJS,aAKgBf,mBAAS,IALzB,mBAKfgB,EALe,KAKFC,EALE,OAMUjB,mBAAS,IANnB,mBAMfkB,EANe,KAMLC,EANK,OAOgBnB,mBAAS,IAPzB,mBAOfoB,EAPe,KAOFC,EAPE,KA+DtB,OArDAlB,oBAAU,WAuBRmB,UAAUC,YAAYC,mBAhBtB,SAAiBC,GACf,IAAIC,EAAMD,EAAIE,OAEdC,QAAQC,IAAI,6BACZD,QAAQC,IAAR,qBAA0BH,EAAIf,WAC9BiB,QAAQC,IAAR,qBAA0BH,EAAIb,YAC9Be,QAAQC,IAAR,uBAA4BH,EAAII,SAAhC,aAEAlB,EAAYc,EAAIf,UAChBG,EAAaY,EAAIb,YAGnB,SAAekB,GACbH,QAAQI,KAAR,gBAAsBD,EAAIE,KAA1B,cAAoCF,EAAIG,WAnB5B,CACZC,oBAAoB,EACpBC,QAAS,IACTC,WAAY,KAoBb,CAAC1B,EAAUE,IAGdV,oBAAU,WACR,IAAMmC,EAAG,6DAAyD3B,EAAzD,gBAAyEE,EAAzE,2CADK,2CAEd,oCAAA0B,EAAA,qEACyBC,IAAMF,GAD/B,OACQG,EADR,OAEQC,EAAOD,EAASC,KAChB1B,EAAc0B,EAAKC,KAAKC,KACxB1B,EAAWwB,EAAKC,KAAKzB,SACrBE,EAAcsB,EAAKG,QAAQ,GAAGzB,YACpCL,EAAQ2B,GACRzB,EAAeD,GACfG,EAAYD,GACZG,EAAeD,GATjB,2CAFc,0DAad0B,IACC,CAACnC,EAAUE,IAaZ,kBAACrB,EAAD,KACE,6BACE,2CACA,uCAAamB,GACb,wCAAcE,GACd,sCACA,2BAAIO,GACJ,4CACA,uCAlBN,SAAgC2B,GAC9B,IAAMC,EAAUD,EAAM,OACtB,OAAOE,KAAKC,MAAMF,GAgBDG,CAAuBnC,GAApC,QACA,0CAfN,SAAmC+B,GACjC,IAAMC,EAAUD,EAAM,OACtB,OAAOE,KAAKC,MAAiB,IAAVF,EAAiB,IAahBI,CAA0BpC,GAA1C,QACA,yCACA,2BAAIE,EAAJ,QClEOmC,MAVf,SAAsBzD,GACpB,OACE,kBAACJ,EAAD,KACE,6BACE,oDCkBO8D,MAlBf,WAIE,OACE,yBAAKC,UAAU,OACb,kBAAC/D,EAAD,KACE,iEACA,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,UCNUgE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmB1C,WACrBA,UAAU2C,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.f0adb2ff.chunk.js","sourcesContent":["import styled from \"styled-components\";\r\n\r\n export const Wrapper= styled.div`\r\n  display: flex;\r\n  border: black solid 1px;\r\n  flex-direction:column;\r\n  justify-content: center;\r\n  margin: auto;\r\n`;\r\n\r\n\r\n","import React from \"react\";\r\nimport { Wrapper } from \"../StylingFolder/style\";\r\n\r\nfunction Clock(props) {\r\n  const timer = useNewTimer(new Date());\r\n\r\n  return (\r\n    <Wrapper>\r\n      <div>\r\n        <h1>Hello, world!</h1>\r\n        <h2>It is {timer.toLocaleTimeString()}.</h2>\r\n      </div>\r\n    </Wrapper>\r\n  );\r\n}\r\n\r\nfunction useNewTimer(currentDate) {\r\n  const [date, setDate] = React.useState(currentDate);\r\n\r\n  React.useEffect(() => {\r\n    var timerID = setInterval(() => tick(), 1000);\r\n    return function cleanup() {\r\n      clearInterval(timerID);\r\n    };\r\n  });\r\n\r\n  function tick() {\r\n    setDate(new Date());\r\n  }\r\n\r\n  return date;\r\n}\r\n\r\nexport default Clock;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Wrapper } from \"../StylingFolder/style\";\r\nimport axios from \"axios\";\r\n\r\nfunction Weather(props) {\r\n  //Sets state\r\n  const [latitude, setLatitude] = useState(\"\");\r\n  const [longitude, setLongitude] = useState(\"\");\r\n  const [data, setData] = useState(\"\");\r\n  const [temperature, setTemperature] = useState(\"\");\r\n  const [humidity, setHumidity] = useState(\"\");\r\n  const [description, setDescription] = useState(\"\");\r\n\r\n  //Fetches location.\r\n  useEffect(() => {\r\n    var options = {\r\n      enableHighAccuracy: true,\r\n      timeout: 2000,\r\n      maximumAge: 0\r\n    };\r\n\r\n    function success(pos) {\r\n      var crd = pos.coords;\r\n\r\n      console.log(\"Your current position is:\");\r\n      console.log(`Latitude : ${crd.latitude}`);\r\n      console.log(`Longitude: ${crd.longitude}`);\r\n      console.log(`More or less ${crd.accuracy} meters.`);\r\n\r\n      setLatitude(crd.latitude);\r\n      setLongitude(crd.longitude);\r\n    }\r\n\r\n    function error(err) {\r\n      console.warn(`ERROR(${err.code}): ${err.message}`);\r\n    }\r\n\r\n    navigator.geolocation.getCurrentPosition(success, error, options);\r\n  }, [latitude, longitude]);\r\n\r\n  //Fetches weather data based on coordinates and sets the state\r\n  useEffect(() => {\r\n    const url = `http://api.openweathermap.org/data/2.5/weather?lat=${latitude}&lon=${longitude}&APPID=5dac0afa27fec8d40372cc6e258f2a8b`;\r\n    async function fetchData() {\r\n      const response = await axios(url);\r\n      const data = response.data;\r\n      const temperature = data.main.temp;\r\n      const humidity = data.main.humidity;\r\n      const description = data.weather[0].description;\r\n      setData(data);\r\n      setTemperature(temperature);\r\n      setHumidity(humidity);\r\n      setDescription(description);\r\n    }\r\n    fetchData();\r\n  }, [latitude, longitude]);\r\n\r\n  //Converts Kelvin to Celsius.\r\n  function convertKelvinToCelsius(num) {\r\n    const Celsius = num - 273.25;\r\n    return Math.round(Celsius);\r\n  }\r\n  function convertKelvintoFahrenheit(num){\r\n    const Celsius = num - 273.25;\r\n    return Math.round((Celsius * 1.8) + 32)\r\n  }\r\n\r\n  return (\r\n    <Wrapper>\r\n      <div>\r\n        <h2>WEATHER!!!!</h2>\r\n        <p>Latitude:{latitude}</p>\r\n        <p>Longitude:{longitude}</p>\r\n        <h3>Today:</h3>\r\n        <p>{description}</p>\r\n        <h3>Temperature:</h3>\r\n        <p>Celsius: {convertKelvinToCelsius(temperature)}°</p>\r\n        <p>Fahrenheit: {convertKelvintoFahrenheit(temperature)}°</p>\r\n        <h3>Humidity:</h3>\r\n        <p>{humidity}%</p>\r\n      </div>\r\n    </Wrapper>\r\n  );\r\n}\r\n\r\nexport default Weather;\r\n","import React from \"react\";\r\nimport { Wrapper } from \"../StylingFolder/style\";\r\n\r\nfunction GoogleSearch(props) {\r\n  return (\r\n    <Wrapper>\r\n      <div>\r\n        <h2>Google Search!!!!</h2>\r\n      </div>\r\n    </Wrapper>\r\n  );\r\n}\r\n\r\nexport default GoogleSearch;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Clock from \"./Components/Clock\";\nimport Weather from \"./Components/Weather\";\nimport GoogleSearch from \"./Components/GoogleSearch\";\nimport {Wrapper} from \"./StylingFolder/style\"\n\nfunction App() {\n\n  \n\n  return (\n    <div className=\"App\">\n      <Wrapper>\n        <h1>This is the Peaceful Homepage!!!!</h1>\n        <div>\n          <Clock />\n          <Weather />\n          <GoogleSearch />\n        </div>\n      </Wrapper>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}